{
	"name": "df_challenge_silver_to_gold",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_adls_sink_parquet",
						"type": "DatasetReference"
					},
					"name": "employeesSilver"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_sink_parquet",
						"type": "DatasetReference"
					},
					"name": "departmentsSilver"
				},
				{
					"dataset": {
						"referenceName": "ds_adls_sink_parquet",
						"type": "DatasetReference"
					},
					"name": "jobsSilver"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_adls_sink_parquet",
						"type": "DatasetReference"
					},
					"name": "employeesGold",
					"rejectedDataLinkedService": {
						"referenceName": "onb-demo-synapse-analytics-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "ds_adls_sink_parquet",
						"type": "DatasetReference"
					},
					"name": "departmentsGold",
					"rejectedDataLinkedService": {
						"referenceName": "onb-demo-synapse-analytics-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					}
				},
				{
					"dataset": {
						"referenceName": "ds_adls_sink_parquet",
						"type": "DatasetReference"
					},
					"name": "jobsGold",
					"rejectedDataLinkedService": {
						"referenceName": "onb-demo-synapse-analytics-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					}
				}
			],
			"transformations": [
				{
					"name": "SetDateKey"
				},
				{
					"name": "SelectColumns"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          name as string,",
				"          datetime as string,",
				"          department_id as integer,",
				"          job_id as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> employeesSilver",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> departmentsSilver",
				"source(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> jobsSilver",
				"employeesSilver derive(date = replace((split(datetime, 'T')[1]), '-', ''),",
				"          time = replace((split(datetime, 'T')[2]), 'Z', '')) ~> SetDateKey",
				"SetDateKey select(mapColumn(",
				"          id,",
				"          name,",
				"          department_id,",
				"          job_id,",
				"          date,",
				"          time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectColumns",
				"SelectColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> employeesGold",
				"departmentsSilver sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> departmentsGold",
				"jobsSilver sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     truncate: true,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> jobsGold"
			]
		}
	}
}